{"ast":null,"code":"var net = require('net');\n\nvar iconv = require(\"iconv-lite\");\n\nconst TelnetState = {\n  init: 0,\n  failed: 1,\n  connecting: 2,\n  authing: 3,\n  ready: 4,\n  close: 5,\n  properties: {\n    0: {\n      name: 'init',\n      value: 0\n    },\n    1: {\n      name: 'failed',\n      value: 1\n    },\n    2: {\n      name: 'connecting',\n      value: 2\n    },\n    3: {\n      name: 'authed',\n      value: 3\n    },\n    4: {\n      name: 'ready',\n      value: 4\n    },\n    5: {\n      name: 'close',\n      value: 4\n    }\n  }\n};\nconst strUtil = {\n  search: function (str, pattern) {\n    if (pattern instanceof RegExp) return str.search(pattern) != -1;else return str.indexOf(pattern) != -1;\n  }\n};\n\nclass TelnetClient {\n  constructor(telnetConfig) {\n    this.host = telnetConfig.host != undefined ? telnetConfig.host : '127.0.0.1';\n    this.port = telnetConfig.port != undefined ? telnetConfig.port : 8080;\n    this.username = telnetConfig.username != undefined ? telnetConfig.username : 'root';\n    this.password = telnetConfig.password != undefined ? telnetConfig.password : 'root';\n    this.timeout = telnetConfig.timeout != undefined ? telnetConfig.timeout : 0;\n    this.loginPrompt = telnetConfig.loginPrompt != undefined ? telnetConfig.loginPrompt : 'Login: ';\n    this.passwordPrompt = telnetConfig.passwordPrompt != undefined ? telnetConfig.passwordPrompt : 'Password: ';\n    this.irs = telnetConfig.irs != undefined ? telnetConfig.irs : '\\r\\n';\n    this.shellPrompt = telnetConfig.shellPrompt != undefined ? telnetConfig.shellPrompt : /(?:\\/ )?#\\s/;\n    this.execTimeout = telnetConfig.execTimeout != undefined ? telnetConfig.execTimeout : 2000;\n    this.sendTimeout = telnetConfig.sendTimeout != undefined ? telnetConfig.sendTimeout : 2000;\n    this.debug = telnetConfig.debug != undefined ? telnetConfig.debug : false;\n    this.serverEncoding = telnetConfig.encoding;\n    this.net = null;\n    this.state = TelnetState.init;\n    this.processFuns = {};\n    this.sending = false;\n    this.sendlist = new Array();\n    this.evts = {\n      \"data\": true,\n      \"close\": true,\n      \"drain\": true,\n      \"end\": true,\n      \"error\": true,\n      \"lookup\": true,\n      \"ready\": true,\n      \"timeout\": true,\n      \"authed\": true\n    };\n  }\n\n  connect() {\n    this.net = new net.Socket();\n    this.net.setEncoding('binary');\n    if (this.timeout > 0) this.net.setTimeout(this.timeout, () => {\n      if (this.processFuns.timeout) this.processFuns.timeout();\n    });\n    this.state = TelnetState.connecting;\n    this.net.connect(this.port, this.host); // 时间处理\n\n    this.net.on(\"connect\", data => {\n      this.connected(data);\n    });\n    this.net.on(\"data\", data => {\n      this.recvmessage(data);\n    });\n    this.net.on(\"close\", data => {\n      this.close(data);\n    });\n    this.net.on(\"drain\", data => {\n      this.drain(data);\n    });\n    this.net.on(\"end\", data => {\n      this.netend(data);\n    });\n    this.net.on(\"error\", data => {\n      this.error(data);\n    });\n    this.net.on(\"lookup\", data => {\n      this.lookup(data);\n    });\n    this.net.on(\"ready\", data => {\n      this.ready(data);\n    }); // this.net.on(\"timeout\",  this.timeout)\n  }\n\n  send(data, callback) {\n    if (this.net == null) {\n      if (callback) callback(false);\n      return false;\n    }\n\n    if (this.sending) {\n      this.sendlist.push({\n        data: data,\n        cb: callback\n      });\n      return true;\n    } else {\n      this.sending = this.state;\n      this.net.write(data, () => {\n        this.sending = false;\n        if (callback) callback(true);\n        var n = this.sendlist.shift();\n        if (n) this.send(n.data, n.cb);\n      });\n    }\n  }\n\n  debuglog(format, ...args) {\n    if (this.debug) {\n      console.log(format, ...args);\n    }\n  }\n\n  connected() {\n    this.state = TelnetState.authing;\n    this.debuglog(\"connect to %s %d ok!\", this.host, this.port);\n  }\n\n  recvmessage(data) {\n    if (data == undefined) return;\n    if (this.serverEncoding != undefined) data = iconv.decode(data, this.serverEncoding);\n\n    if (this.state == TelnetState.authing) {\n      if (strUtil.search(data, this.loginPrompt)) this.send(this.username + this.irs);else if (strUtil.search(data, this.passwordPrompt)) this.send(this.username + this.irs);else if (strUtil.search(data, this.shellPrompt)) {\n        this.state = TelnetState.ready;\n        if (this.processFuns.authed) this.processFuns.authed(data);\n      }\n    } else if (this.state == TelnetState.ready) {\n      if (this.processFuns.data) this.processFuns.data(data);else this.debuglog(\"recvmessage no process fun %s\", data);\n    } else {\n      this.debuglog(\"recvmessage is error state %s, recv data %s\", this.state, data);\n    }\n  }\n\n  close(data) {\n    this.net = null;\n    this.debuglog(\"telnet close\");\n    if (this.processFuns.close) this.processFuns.close(data);\n  }\n\n  drain(data) {\n    this.debuglog(\"telnet drain %s\", data);\n    if (this.processFuns.drain) this.processFuns.drain(data);\n  }\n\n  netend(data) {\n    this.debuglog(\"telnet netend %s\", data);\n    if (this.processFuns.end) this.processFuns.end(data);\n  }\n\n  error(data) {\n    this.debuglog(\"telnet error %s\", data);\n    if (this.processFuns.error) this.processFuns.error(data);\n  }\n\n  lookup(data) {\n    this.debuglog(\"telnet lookup %s\", data);\n    if (this.processFuns.lookup) this.processFuns.lookup(data);\n  }\n\n  ready(data) {\n    this.debuglog(\"telnet ready %s\", data);\n    if (this.processFuns.ready) this.processFuns.ready(data);\n  }\n\n  timeout(data) {\n    this.debuglog(\"telnet timeout %s\", data);\n    if (this.processFuns.timeout) this.processFuns.timeout(data);\n    this.net.destroy();\n    this.net = null;\n  }\n\n  on(evt, cb) {\n    if (!this.evts[evt]) {\n      this.debuglog(\"添加监听接口失败! 不支持 evt:%s\", evt);\n      return false;\n    } else if (this.processFuns[evt] != undefined) {\n      this.debuglog(\"添加监听接口失败! 已经添加 %s\", this.processFuns);\n      return false;\n    } else if (typeof cb != 'function') {\n      this.debuglog(\"添加监听接口失败! 回调接口类型错误 %s\", typeof cb);\n      return false;\n    } else {\n      this.processFuns[evt] = cb;\n      return true;\n    }\n  }\n\n}\n\nmodulesexports = {\n  TelnetClient: TelnetClient,\n  strUtil: strUtil\n};","map":{"version":3,"sources":["E:\\GitHub\\nytool\\src\\modules\\TelnetClient.js"],"names":["net","require","iconv","TelnetState","init","failed","connecting","authing","ready","close","properties","name","value","strUtil","search","str","pattern","RegExp","indexOf","TelnetClient","constructor","telnetConfig","host","undefined","port","username","password","timeout","loginPrompt","passwordPrompt","irs","shellPrompt","execTimeout","sendTimeout","debug","serverEncoding","encoding","state","processFuns","sending","sendlist","Array","evts","connect","Socket","setEncoding","setTimeout","on","data","connected","recvmessage","drain","netend","error","lookup","send","callback","push","cb","write","n","shift","debuglog","format","args","console","log","decode","authed","end","destroy","evt","modulesexports"],"mappings":"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","sourcesContent":["var net = require('net');\r\nvar iconv = require(\"iconv-lite\");\r\nconst TelnetState = {\r\n    init: 0,\r\n    failed:1,\r\n    connecting:2,\r\n    authing:3,\r\n    ready:4,\r\n    close:5,\r\n\r\n    properties:{\r\n        0:{name:'init', value:0},\r\n        1:{name:'failed', value:1},\r\n        2:{name:'connecting', value:2},\r\n        3:{name:'authed', value:3},\r\n        4:{name:'ready', value:4},\r\n        5:{name:'close', value:4},\r\n    }\r\n}\r\n\r\n\r\nconst strUtil = {\r\n    search: function(str, pattern){\r\n        if (pattern instanceof RegExp)\r\n            return (str.search(pattern) != -1)\r\n        else\r\n            return (str.indexOf(pattern) != -1)\r\n    }\r\n}\r\n \r\nclass TelnetClient{\r\n    constructor(telnetConfig){\r\n        this.host = telnetConfig.host != undefined ? telnetConfig.host : '127.0.0.1'\r\n        this.port = telnetConfig.port != undefined ? telnetConfig.port : 8080\r\n        this.username = telnetConfig.username != undefined ? telnetConfig.username : 'root'\r\n        this.password = telnetConfig.password != undefined ? telnetConfig.password : 'root'\r\n        this.timeout =  telnetConfig.timeout != undefined ? telnetConfig.timeout : 0\r\n        this.loginPrompt = telnetConfig.loginPrompt != undefined ? telnetConfig.loginPrompt : 'Login: '\r\n        this.passwordPrompt = telnetConfig.passwordPrompt != undefined ? telnetConfig.passwordPrompt : 'Password: '\r\n        this.irs = telnetConfig.irs != undefined ? telnetConfig.irs : '\\r\\n'\r\n        this.shellPrompt = telnetConfig.shellPrompt != undefined ? telnetConfig.shellPrompt : /(?:\\/ )?#\\s/\r\n        this.execTimeout = telnetConfig.execTimeout != undefined ? telnetConfig.execTimeout : 2000\r\n        this.sendTimeout = telnetConfig.sendTimeout != undefined ? telnetConfig.sendTimeout : 2000\r\n        this.debug = telnetConfig.debug != undefined ? telnetConfig.debug : false\r\n        this.serverEncoding = telnetConfig.encoding\r\n        this.net = null\r\n        this.state = TelnetState.init\r\n        this.processFuns = {}\r\n        this.sending = false\r\n        this.sendlist = new Array()\r\n        this.evts = {\r\n            \"data\"      : true,\r\n            \"close\"     : true,\r\n            \"drain\"     : true,\r\n            \"end\"       : true,\r\n            \"error\"     : true,\r\n            \"lookup\"    : true,\r\n            \"ready\"     : true,\r\n            \"timeout\"   : true,\r\n            \"authed\"    : true,\r\n        }\r\n    }\r\n\r\n    connect(){\r\n        this.net = new net.Socket();\r\n        this.net.setEncoding('binary');\r\n        if(this.timeout > 0)\r\n            this.net.setTimeout(this.timeout, ()=>{\r\n                if(this.processFuns.timeout)\r\n                    this.processFuns.timeout()\r\n            })\r\n\r\n        this.state = TelnetState.connecting\r\n        this.net.connect(this.port, this.host)\r\n        // 时间处理\r\n        this.net.on(\"connect\",  (data)=>{this.connected(data)})\r\n        this.net.on(\"data\",     (data)=>{this.recvmessage(data)})\r\n        this.net.on(\"close\",    (data)=>{this.close(data)})\r\n        this.net.on(\"drain\",    (data)=>{this.drain(data)})\r\n        this.net.on(\"end\",      (data)=>{this.netend(data)})\r\n        this.net.on(\"error\",    (data)=>{this.error(data)})\r\n        this.net.on(\"lookup\",   (data)=>{this.lookup(data)})\r\n        this.net.on(\"ready\",    (data)=>{this.ready(data)})\r\n        // this.net.on(\"timeout\",  this.timeout)\r\n    }\r\n\r\n    send(data, callback){\r\n        if (this.net == null)\r\n        {\r\n            if (callback)\r\n                callback(false)\r\n            return false\r\n        }\r\n\r\n        \r\n        if (this.sending)\r\n        {\r\n            this.sendlist.push({data: data, cb: callback})\r\n            return true\r\n        }\r\n        else\r\n        {\r\n            this.sending = this.state\r\n            this.net.write(data, () =>{\r\n                this.sending = false\r\n                if(callback)\r\n                    callback(true)\r\n                var n = this.sendlist.shift()\r\n                if(n)\r\n                    this.send(n.data, n.cb)\r\n            })\r\n        }\r\n    }\r\n\r\n    debuglog(format, ...args){\r\n        if(this.debug){\r\n            console.log(format, ...args)\r\n        }\r\n    }\r\n\r\n    connected(){\r\n        this.state = TelnetState.authing\r\n        this.debuglog(\"connect to %s %d ok!\", this.host, this.port)\r\n    }\r\n\r\n    recvmessage(data){\r\n        if(data == undefined)\r\n            return\r\n\r\n        if(this.serverEncoding != undefined)\r\n            data = iconv.decode(data, this.serverEncoding)\r\n\r\n        if(this.state == TelnetState.authing){\r\n            if(strUtil.search(data, this.loginPrompt))\r\n                this.send(this.username + this.irs)\r\n            else if(strUtil.search(data, this.passwordPrompt))\r\n                this.send(this.username + this.irs)\r\n            else if (strUtil.search(data, this.shellPrompt)){\r\n                this.state = TelnetState.ready\r\n                if(this.processFuns.authed)\r\n                    this.processFuns.authed(data)\r\n            }\r\n        }\r\n        else if(this.state == TelnetState.ready){\r\n            if(this.processFuns.data)\r\n                this.processFuns.data(data)\r\n            else\r\n                this.debuglog(\"recvmessage no process fun %s\", data)\r\n        }\r\n        else\r\n        {\r\n            this.debuglog(\"recvmessage is error state %s, recv data %s\", this.state, data)\r\n        }\r\n    }\r\n\r\n    close(data){\r\n        this.net = null\r\n        this.debuglog(\"telnet close\")\r\n        if(this.processFuns.close)\r\n            this.processFuns.close(data)\r\n    }\r\n\r\n    drain(data){\r\n        this.debuglog(\"telnet drain %s\", data)\r\n        if(this.processFuns.drain)\r\n            this.processFuns.drain(data)\r\n    }\r\n\r\n    netend(data){\r\n        this.debuglog(\"telnet netend %s\", data)\r\n        if(this.processFuns.end)\r\n            this.processFuns.end(data)\r\n    }\r\n\r\n    error(data){\r\n        this.debuglog(\"telnet error %s\", data)\r\n        if(this.processFuns.error)\r\n            this.processFuns.error(data)\r\n    }\r\n\r\n    lookup(data){\r\n        this.debuglog(\"telnet lookup %s\", data)\r\n        if(this.processFuns.lookup)\r\n            this.processFuns.lookup(data)\r\n    }\r\n\r\n    ready(data){\r\n        this.debuglog(\"telnet ready %s\", data)\r\n        if(this.processFuns.ready)\r\n            this.processFuns.ready(data)\r\n    }\r\n\r\n    timeout(data){\r\n        this.debuglog(\"telnet timeout %s\", data)\r\n        if(this.processFuns.timeout)\r\n            this.processFuns.timeout(data)\r\n        this.net.destroy()\r\n        this.net = null\r\n    }\r\n    \r\n    on(evt, cb){\r\n        if(!this.evts[evt]){\r\n            this.debuglog(\"添加监听接口失败! 不支持 evt:%s\", evt)\r\n            return false\r\n        }\r\n        else if(this.processFuns[evt] != undefined){\r\n            this.debuglog(\"添加监听接口失败! 已经添加 %s\", this.processFuns)\r\n            return false\r\n        }\r\n        else if(typeof(cb) != 'function'){\r\n            this.debuglog(\"添加监听接口失败! 回调接口类型错误 %s\", typeof(cb))\r\n            return false\r\n        }\r\n        else{\r\n            this.processFuns[evt] = cb\r\n            return true\r\n        }\r\n    }\r\n}\r\n\r\nmodulesexports = {\r\n    TelnetClient:TelnetClient,\r\n    strUtil:strUtil,\r\n}"]},"metadata":{},"sourceType":"module"}