{"ast":null,"code":"var _jsxFileName = \"E:\\\\GitHub\\\\nytool\\\\src\\\\webClient\\\\modules\\\\querydb.js\";\nimport React from 'react';\nimport * as dataMgr from '../../dataMgr';\nimport './timeSpeed.css';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\nconst axios = require('axios');\n\nconst _require = require(\"../base/loadConfig\"),\n      loadConfig = _require.loadConfig;\n\nclass QueryDB extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dbList: Array(),\n      selectList: Array(),\n      dbRet: null\n    };\n  }\n\n  recvServerData(response) {\n    console.log(\"1111111111111111111\", response.data.keys, response.data.datas);\n    this.setState({\n      dbRet: response.data\n    });\n  }\n\n  onloadConfig() {\n    const configPathText = document.getElementById('configPath');\n    console.log(\"configPathText\", configPathText.value);\n    loadConfig(configPathText.value, data => {\n      let dbList = Array();\n      data.dbList.forEach(x => {\n        if (undefined === x.userName) {\n          x.userName = data.default.userName;\n        }\n\n        if (undefined === x.password) {\n          x.password = data.default.password;\n        }\n\n        dbList.push(x);\n      });\n      this.setState({\n        dbList: dbList\n      });\n    });\n  }\n\n  onDBExecute() {\n    const sqlText = document.getElementById('sql');\n    const dbList = this.state.dbList.slice();\n    const selectList = this.state.selectList.slice();\n    let dbConfigs = [];\n    selectList.forEach((v, i) => {\n      console.log(\"selectList.forEach\", v, i);\n\n      if (v == true && dbList[i]) {\n        dbConfigs.push(dbList[i]);\n      } else {\n        alert(\"异常：\\n 数据信息异常\");\n        return;\n      }\n    });\n\n    if (dbConfigs.length == 0) {\n      alert(\"选择要查询的数据库\");\n      return;\n    }\n\n    console.log(\"sql\", sqlText.value, encodeURI(sqlText.value));\n    axios.get('http://localhost:999/dbQuery', {\n      params: {\n        dbConfigs: JSON.stringify(dbConfigs),\n        sql: JSON.stringify({\n          v: sqlText.value\n        })\n      }\n    }).then(response => {\n      this.recvServerData(response);\n    }).catch(function (error) {\n      alert(\"异常：\\n\" + error.message);\n    });\n  }\n\n  render() {\n    const dbList = this.state.dbList.slice();\n    dbList.forEach((v, i) => {\n      dbList[i].id = i;\n    });\n    var dbshows = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    });\n    const dbRet = this.state.dbRet;\n\n    if (dbRet) {\n      const datas = [];\n      dbRet.datas.forEach(x => {\n        x._id = datas.length;\n        datas.push(x);\n      });\n      const tt = dbRet.keys.map((i, k) => {\n        return React.createElement(TableHeaderColumn, {\n          dataField: i,\n          dataAlign: \"center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, i);\n      });\n      let showError = \"\";\n      dbRet.results.forEach(x => {\n        if (x.errorCode != 0) {\n          showError = showError + x.info + '\\n';\n        }\n      });\n      let errorShow;\n\n      if (showError.length > 0) {\n        dbshows = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(\"text\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, \"showError\"), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }), React.createElement(BootstrapTable, {\n          data: datas,\n          striped: true,\n          hover: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, React.createElement(TableHeaderColumn, {\n          dataField: \"_id\",\n          isKey: true,\n          dataAlign: \"center\",\n          dataSort: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, \"ID\"), tt));\n      } else {\n        dbshows = React.createElement(BootstrapTable, {\n          data: datas,\n          striped: true,\n          hover: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, React.createElement(TableHeaderColumn, {\n          dataField: \"_id\",\n          isKey: true,\n          dataAlign: \"center\",\n          dataSort: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, \"ID\"), tt);\n      }\n    }\n\n    const selectRowProp = {\n      mode: 'checkbox',\n      bgColor: 'yellow',\n      clickToSelect: true,\n      onSelect: (data, isSelected, event, rowIndex) => {\n        console.log(\"select id\", data, isSelected, event, rowIndex);\n        const selectList = this.state.selectList.slice();\n        if (isSelected) selectList[rowIndex] = true;else selectList[rowIndex] = false;\n        this.setState({\n          selectList: selectList\n        });\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"dbconfig\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"text\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"\\u914D\\u7F6E\\u4FE1\\u606F\"), React.createElement(\"div\", {\n      className: \"showdiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"text\", {\n      className: \"ipText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"\\u914D\\u7F6E\\u5730\\u5740:\"), React.createElement(\"textarea\", {\n      type: \"text\",\n      id: \"configPath\",\n      className: \"configPath\",\n      value: \"E:\\\\\\\\GitHub\\\\\\\\nytool\\\\\\\\configs\\\\\\\\dbConfig.json\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"multButton\",\n      onClick: () => {\n        this.onloadConfig();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"\\u52A0\\u8F7D\\u914D\\u7F6E\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(BootstrapTable, {\n      data: dbList,\n      striped: true,\n      hover: true,\n      selectRow: selectRowProp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(TableHeaderColumn, {\n      dataField: \"id\",\n      isKey: true,\n      dataAlign: \"center\",\n      dataSort: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"ID\"), React.createElement(TableHeaderColumn, {\n      dataField: \"serverID\",\n      dataAlign: \"center\",\n      dataSort: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"server ID\"), React.createElement(TableHeaderColumn, {\n      dataField: \"dbIP\",\n      dataAlign: \"center\",\n      dataSort: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Server IP\"), React.createElement(TableHeaderColumn, {\n      dataField: \"port\",\n      dataAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Server Port\")))), React.createElement(\"label\", {\n      className: \"dbresult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"text\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"\\u67E5\\u8BE2\\u7ED3\\u679C\"), React.createElement(\"div\", {\n      className: \"showdiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"text\", {\n      className: \"ipText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"SQL:\"), React.createElement(\"textarea\", {\n      type: \"text\",\n      id: \"sql\",\n      className: \"dbSql\",\n      value: \"select * from test;\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"dbExecute\",\n      onClick: () => {\n        this.onDBExecute();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"\\u6267\\u884C\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), dbshows)));\n  }\n\n}\n\ndataMgr.regNewTool(\"数据查询\", () => {\n  return React.createElement(QueryDB, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  });\n});","map":{"version":3,"sources":["E:\\GitHub\\nytool\\src\\webClient\\modules\\querydb.js"],"names":["React","dataMgr","BootstrapTable","TableHeaderColumn","axios","require","loadConfig","QueryDB","Component","constructor","props","state","dbList","Array","selectList","dbRet","recvServerData","response","console","log","data","keys","datas","setState","onloadConfig","configPathText","document","getElementById","value","forEach","x","undefined","userName","default","password","push","onDBExecute","sqlText","slice","dbConfigs","v","i","alert","length","encodeURI","get","params","JSON","stringify","sql","then","catch","error","message","render","id","dbshows","_id","tt","map","k","showError","results","errorCode","info","errorShow","selectRowProp","mode","bgColor","clickToSelect","onSelect","isSelected","event","rowIndex","regNewTool"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,eAAzB;AACA,OAAO,iBAAP;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,uBAAlD;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;iBACqBA,OAAO,CAAC,oBAAD,C;MAArBC,U,YAAAA,U;;AAEP,MAAMC,OAAN,SAAsBP,KAAK,CAACQ,SAA5B,CAAsC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAEC,KAAK,EADJ;AAETC,MAAAA,UAAU,EAACD,KAAK,EAFP;AAGTE,MAAAA,KAAK,EAAC;AAHG,KAAb;AAKH;;AAEDC,EAAAA,cAAc,CAACC,QAAD,EAAU;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,QAAQ,CAACG,IAAT,CAAcC,IAAjD,EAAuDJ,QAAQ,CAACG,IAAT,CAAcE,KAArE;AACA,SAAKC,QAAL,CAAc;AAACR,MAAAA,KAAK,EAACE,QAAQ,CAACG;AAAhB,KAAd;AACH;;AAEDI,EAAAA,YAAY,GACZ;AACI,UAAMC,cAAc,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAvB;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BM,cAAc,CAACG,KAA7C;AACAtB,IAAAA,UAAU,CAACmB,cAAc,CAACG,KAAhB,EAAuBR,IAAI,IAAE;AACnC,UAAIR,MAAM,GAAGC,KAAK,EAAlB;AACAO,MAAAA,IAAI,CAACR,MAAL,CAAYiB,OAAZ,CAAoBC,CAAC,IAAE;AACnB,YAAGC,SAAS,KAAKD,CAAC,CAACE,QAAnB,EAA4B;AACxBF,UAAAA,CAAC,CAACE,QAAF,GAAaZ,IAAI,CAACa,OAAL,CAAaD,QAA1B;AACH;;AACD,YAAGD,SAAS,KAAKD,CAAC,CAACI,QAAnB,EAA4B;AACxBJ,UAAAA,CAAC,CAACI,QAAF,GAAad,IAAI,CAACa,OAAL,CAAaC,QAA1B;AACH;;AACDtB,QAAAA,MAAM,CAACuB,IAAP,CAAYL,CAAZ;AACH,OARD;AASA,WAAKP,QAAL,CAAc;AAACX,QAAAA,MAAM,EAACA;AAAR,OAAd;AACH,KAZS,CAAV;AAaH;;AAEDwB,EAAAA,WAAW,GACX;AACI,UAAMC,OAAO,GAAGX,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAhB;AACA,UAAMf,MAAM,GAAG,KAAKD,KAAL,CAAWC,MAAX,CAAkB0B,KAAlB,EAAf;AACA,UAAMxB,UAAU,GAAG,KAAKH,KAAL,CAAWG,UAAX,CAAsBwB,KAAtB,EAAnB;AACA,QAAIC,SAAS,GAAG,EAAhB;AACAzB,IAAAA,UAAU,CAACe,OAAX,CAAmB,CAACW,CAAD,EAAGC,CAAH,KAAO;AACtBvB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCqB,CAAlC,EAAoCC,CAApC;;AACA,UAAGD,CAAC,IAAI,IAAL,IAAa5B,MAAM,CAAC6B,CAAD,CAAtB,EAA0B;AACtBF,QAAAA,SAAS,CAACJ,IAAV,CAAevB,MAAM,CAAC6B,CAAD,CAArB;AACH,OAFD,MAGI;AACAC,QAAAA,KAAK,CAAC,cAAD,CAAL;AACA;AACH;AACJ,KATD;;AAWA,QAAGH,SAAS,CAACI,MAAV,IAAoB,CAAvB,EACA;AACID,MAAAA,KAAK,CAAC,WAAD,CAAL;AACA;AACH;;AACDxB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBkB,OAAO,CAACT,KAA3B,EAAkCgB,SAAS,CAACP,OAAO,CAACT,KAAT,CAA3C;AACAxB,IAAAA,KAAK,CAACyC,GAAN,CAAU,8BAAV,EAA0C;AACtCC,MAAAA,MAAM,EAAE;AACJP,QAAAA,SAAS,EAACQ,IAAI,CAACC,SAAL,CAAeT,SAAf,CADN;AAEJU,QAAAA,GAAG,EAACF,IAAI,CAACC,SAAL,CAAe;AAACR,UAAAA,CAAC,EAACH,OAAO,CAACT;AAAX,SAAf;AAFA;AAD8B,KAA1C,EAKGsB,IALH,CAKSjC,QAAD,IAAY;AAAC,WAAKD,cAAL,CAAoBC,QAApB;AAA8B,KALnD,EAKqDkC,KALrD,CAK2D,UAAUC,KAAV,EAAiB;AACxEV,MAAAA,KAAK,CAAC,UAAUU,KAAK,CAACC,OAAjB,CAAL;AACH,KAPD;AAQH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM1C,MAAM,GAAG,KAAKD,KAAL,CAAWC,MAAX,CAAkB0B,KAAlB,EAAf;AACA1B,IAAAA,MAAM,CAACiB,OAAP,CAAe,CAACW,CAAD,EAAGC,CAAH,KAAO;AAClB7B,MAAAA,MAAM,CAAC6B,CAAD,CAAN,CAAUc,EAAV,GAAed,CAAf;AACH,KAFD;AAIA,QAAIe,OAAO,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAf;AACA,UAAMzC,KAAK,GAAG,KAAKJ,KAAL,CAAWI,KAAzB;;AACA,QAAGA,KAAH,EAAS;AACL,YAAMO,KAAK,GAAG,EAAd;AACAP,MAAAA,KAAK,CAACO,KAAN,CAAYO,OAAZ,CAAqBC,CAAD,IAAK;AACrBA,QAAAA,CAAC,CAAC2B,GAAF,GAAQnC,KAAK,CAACqB,MAAd;AACArB,QAAAA,KAAK,CAACa,IAAN,CAAWL,CAAX;AACH,OAHD;AAKA,YAAM4B,EAAE,GAAG3C,KAAK,CAACM,IAAN,CAAWsC,GAAX,CAAe,CAAClB,CAAD,EAAImB,CAAJ,KAAQ;AAC9B,eAAQ,oBAAC,iBAAD;AAAmB,UAAA,SAAS,EAAEnB,CAA9B;AAAiC,UAAA,SAAS,EAAC,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAqDA,CAArD,CAAR;AACH,OAFU,CAAX;AAIA,UAAIoB,SAAS,GAAG,EAAhB;AACA9C,MAAAA,KAAK,CAAC+C,OAAN,CAAcjC,OAAd,CAAuBC,CAAD,IAAK;AACvB,YAAGA,CAAC,CAACiC,SAAF,IAAe,CAAlB,EAAoB;AAChBF,UAAAA,SAAS,GAAGA,SAAS,GAAG/B,CAAC,CAACkC,IAAd,GAAqB,IAAjC;AACH;AACJ,OAJD;AAKA,UAAIC,SAAJ;;AACA,UAAGJ,SAAS,CAAClB,MAAV,GAAmB,CAAtB,EACA;AACIa,QAAAA,OAAO,GACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADA,EACsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADtB,EAEA,oBAAC,cAAD;AAAgB,UAAA,IAAI,EAAElC,KAAtB;AAA6B,UAAA,OAAO,EAAE,IAAtC;AAA4C,UAAA,KAAK,EAAE,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,iBAAD;AAAmB,UAAA,SAAS,EAAC,KAA7B;AAAmC,UAAA,KAAK,EAAE,IAA1C;AAAgD,UAAA,SAAS,EAAC,QAA1D;AAAmE,UAAA,QAAQ,EAAE,IAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKoC,EAFL,CAFA,CADJ;AASH,OAXD,MAYI;AACAF,QAAAA,OAAO,GACH,oBAAC,cAAD;AAAgB,UAAA,IAAI,EAAElC,KAAtB;AAA6B,UAAA,OAAO,EAAE,IAAtC;AAA4C,UAAA,KAAK,EAAE,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,iBAAD;AAAmB,UAAA,SAAS,EAAC,KAA7B;AAAmC,UAAA,KAAK,EAAE,IAA1C;AAAgD,UAAA,SAAS,EAAC,QAA1D;AAAmE,UAAA,QAAQ,EAAE,IAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKoC,EAFL,CADJ;AAMH;AACJ;;AAED,UAAMQ,aAAa,GAAG;AAClBC,MAAAA,IAAI,EAAE,UADY;AAElBC,MAAAA,OAAO,EAAE,QAFS;AAGlBC,MAAAA,aAAa,EAAE,IAHG;AAIlBC,MAAAA,QAAQ,EAAC,CAAClD,IAAD,EAAMmD,UAAN,EAAkBC,KAAlB,EAAyBC,QAAzB,KAAoC;AACzCvD,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBC,IAAxB,EAA6BmD,UAA7B,EAAyCC,KAAzC,EAAgDC,QAAhD;AACA,cAAM3D,UAAU,GAAG,KAAKH,KAAL,CAAWG,UAAX,CAAsBwB,KAAtB,EAAnB;AACA,YAAGiC,UAAH,EACIzD,UAAU,CAAC2D,QAAD,CAAV,GAAuB,IAAvB,CADJ,KAGI3D,UAAU,CAAC2D,QAAD,CAAV,GAAuB,KAAvB;AAEJ,aAAKlD,QAAL,CAAc;AAACT,UAAAA,UAAU,EAACA;AAAZ,SAAd;AACH;AAbiB,KAAtB;AAgBA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,SAAS,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,EAEI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADJ,EAEI;AAAU,MAAA,IAAI,EAAC,MAAf;AAAsB,MAAA,EAAE,EAAC,YAAzB;AAAsC,MAAA,SAAS,EAAC,YAAhD;AAA6D,MAAA,KAAK,EAAC,oDAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAA+B,MAAA,OAAO,EAAE,MAAI;AAAC,aAAKU,YAAL;AAAoB,OAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAHJ,EAGoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHpF,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAKI,oBAAC,cAAD;AAAgB,MAAA,IAAI,EAAEZ,MAAtB;AAA8B,MAAA,OAAO,EAAE,IAAvC;AAA6C,MAAA,KAAK,EAAE,IAApD;AAA0D,MAAA,SAAS,EAAEsD,aAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,iBAAD;AAAmB,MAAA,SAAS,EAAC,IAA7B;AAAkC,MAAA,KAAK,EAAE,IAAzC;AAA+C,MAAA,SAAS,EAAC,QAAzD;AAAkE,MAAA,QAAQ,EAAE,IAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEI,oBAAC,iBAAD;AAAmB,MAAA,SAAS,EAAC,UAA7B;AAAwC,MAAA,SAAS,EAAC,QAAlD;AAA2D,MAAA,QAAQ,EAAE,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,EAGI,oBAAC,iBAAD;AAAmB,MAAA,SAAS,EAAC,MAA7B;AAAoC,MAAA,SAAS,EAAC,QAA9C;AAAuD,MAAA,QAAQ,EAAE,IAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHJ,EAII,oBAAC,iBAAD;AAAmB,MAAA,SAAS,EAAC,MAA7B;AAAoC,MAAA,SAAS,EAAC,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAJJ,CALJ,CAFJ,CADJ,EAgBI;AAAO,MAAA,SAAS,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,EAEI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAU,MAAA,IAAI,EAAC,MAAf;AAAsB,MAAA,EAAE,EAAC,KAAzB;AAA+B,MAAA,SAAS,EAAC,OAAzC;AAAiD,MAAA,KAAK,EAAC,qBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,OAAO,EAAE,MAAI;AAAC,aAAK9B,WAAL;AAAmB,OAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,EAGgF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHhF,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAKKoB,OALL,CAFJ,CAhBJ,CADJ;AA6BH;;AAhKiC;;AAmKtCvD,OAAO,CAACyE,UAAR,CAAmB,MAAnB,EAA2B,MAAI;AAAC,SAAQ,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AAAoB,CAApD","sourcesContent":["import React from 'react';\r\nimport * as dataMgr from '../../dataMgr';\r\nimport './timeSpeed.css';\r\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\r\nconst axios = require('axios');\r\nconst {loadConfig} = require(\"../base/loadConfig\")\r\n\r\nclass QueryDB extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            dbList: Array(),\r\n            selectList:Array(),\r\n            dbRet:null,\r\n        };\r\n    }\r\n\r\n    recvServerData(response){\r\n        console.log(\"1111111111111111111\", response.data.keys, response.data.datas);\r\n        this.setState({dbRet:response.data})\r\n    }\r\n\r\n    onloadConfig()\r\n    {\r\n        const configPathText = document.getElementById('configPath');\r\n        console.log(\"configPathText\", configPathText.value)\r\n        loadConfig(configPathText.value, data=>{\r\n            let dbList = Array()\r\n            data.dbList.forEach(x=>{\r\n                if(undefined === x.userName){\r\n                    x.userName = data.default.userName\r\n                }\r\n                if(undefined === x.password){\r\n                    x.password = data.default.password\r\n                }\r\n                dbList.push(x)\r\n            })\r\n            this.setState({dbList:dbList})\r\n        })\r\n    }\r\n\r\n    onDBExecute()\r\n    {\r\n        const sqlText = document.getElementById('sql');\r\n        const dbList = this.state.dbList.slice()\r\n        const selectList = this.state.selectList.slice()\r\n        let dbConfigs = []\r\n        selectList.forEach((v,i)=>{\r\n            console.log(\"selectList.forEach\", v,i)\r\n            if(v == true && dbList[i]){\r\n                dbConfigs.push(dbList[i])\r\n            }\r\n            else{\r\n                alert(\"异常：\\n 数据信息异常\")\r\n                return\r\n            }\r\n        })\r\n\r\n        if(dbConfigs.length == 0)\r\n        {\r\n            alert(\"选择要查询的数据库\")\r\n            return\r\n        }\r\n        console.log(\"sql\", sqlText.value, encodeURI(sqlText.value))\r\n        axios.get('http://localhost:999/dbQuery', {\r\n            params: {\r\n                dbConfigs:JSON.stringify(dbConfigs),\r\n                sql:JSON.stringify({v:sqlText.value})\r\n            }\r\n        }).then((response)=>{this.recvServerData(response)}).catch(function (error) {\r\n            alert(\"异常：\\n\" + error.message)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const dbList = this.state.dbList.slice()\r\n        dbList.forEach((v,i)=>{\r\n            dbList[i].id = i\r\n        })\r\n\r\n        var dbshows = (<div/>)\r\n        const dbRet = this.state.dbRet\r\n        if(dbRet){\r\n            const datas = []\r\n            dbRet.datas.forEach((x)=>{\r\n                x._id = datas.length\r\n                datas.push(x)\r\n            })\r\n    \r\n            const tt = dbRet.keys.map((i, k)=>{\r\n                return (<TableHeaderColumn dataField={i} dataAlign=\"center\">{i}</TableHeaderColumn>)\r\n            })\r\n            \r\n            let showError = \"\"\r\n            dbRet.results.forEach((x)=>{\r\n                if(x.errorCode != 0){\r\n                    showError = showError + x.info + '\\n'\r\n                }\r\n            })\r\n            let errorShow\r\n            if(showError.length > 0)\r\n            {\r\n                dbshows = (\r\n                    <div>\r\n                    <text>showError</text><hr/>\r\n                    <BootstrapTable data={datas} striped={true} hover={true}>\r\n                        <TableHeaderColumn dataField=\"_id\" isKey={true} dataAlign=\"center\" dataSort={true}>ID</TableHeaderColumn>\r\n                        {tt}\r\n                    </BootstrapTable>\r\n                    </div>\r\n                )\r\n            }\r\n            else{\r\n                dbshows = (\r\n                    <BootstrapTable data={datas} striped={true} hover={true}>\r\n                        <TableHeaderColumn dataField=\"_id\" isKey={true} dataAlign=\"center\" dataSort={true}>ID</TableHeaderColumn>\r\n                        {tt}\r\n                    </BootstrapTable>\r\n                )\r\n            }\r\n        }\r\n\r\n        const selectRowProp = {\r\n            mode: 'checkbox',\r\n            bgColor: 'yellow',\r\n            clickToSelect: true,\r\n            onSelect:(data,isSelected, event, rowIndex)=>{\r\n                console.log(\"select id\",data,isSelected, event, rowIndex)\r\n                const selectList = this.state.selectList.slice()\r\n                if(isSelected)\r\n                    selectList[rowIndex] = true\r\n                else\r\n                    selectList[rowIndex] = false\r\n\r\n                this.setState({selectList:selectList})\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <label className=\"dbconfig\">\r\n                    <text>配置信息</text>\r\n                    <div className=\"showdiv\">\r\n                        <text className=\"ipText\">配置地址:</text>\r\n                        <textarea type=\"text\" id=\"configPath\" className=\"configPath\" value=\"E:\\\\GitHub\\\\nytool\\\\configs\\\\dbConfig.json\"/>\r\n                        <button className=\"multButton\" onClick={()=>{this.onloadConfig()}}>加载配置</button><br/>\r\n                        <hr/>\r\n                        <BootstrapTable data={dbList} striped={true} hover={true} selectRow={selectRowProp}>\r\n                            <TableHeaderColumn dataField=\"id\" isKey={true} dataAlign=\"center\" dataSort={true}>ID</TableHeaderColumn>\r\n                            <TableHeaderColumn dataField=\"serverID\" dataAlign=\"center\" dataSort={true}>server ID</TableHeaderColumn>\r\n                            <TableHeaderColumn dataField=\"dbIP\" dataAlign=\"center\" dataSort={true}>Server IP</TableHeaderColumn>\r\n                            <TableHeaderColumn dataField=\"port\" dataAlign=\"center\">Server Port</TableHeaderColumn>\r\n                        </BootstrapTable>\r\n                    </div>\r\n                </label>\r\n                <label className=\"dbresult\">\r\n                    <text>查询结果</text>\r\n                    <div className=\"showdiv\">\r\n                        <text className=\"ipText\">SQL:</text>\r\n                        <textarea type=\"text\" id=\"sql\" className=\"dbSql\" value=\"select * from test;\"/>\r\n                        <button className=\"dbExecute\" onClick={()=>{this.onDBExecute()}}>执行</button><br/>\r\n                        <hr/>\r\n                        {dbshows}\r\n                    </div>\r\n                </label>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ndataMgr.regNewTool(\"数据查询\", ()=>{return (<QueryDB/>)})\r\n"]},"metadata":{},"sourceType":"module"}